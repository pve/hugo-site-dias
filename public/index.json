[{"content":"Risk in a digital world is not always easy to think through. While we can borrow a lot from the real world, certain important differences exist.\nAt the core of every risk assessment there is the thing we worry about the most: the \u0026lsquo;asset\u0026rsquo;.\nIn a digital world, this is often the data. Think of business critical data, like our database of customers. Think data that we have a compliance obligation on, such as personal data.\nIn information security, like the name implies, we mainly worry about the security of that data.\nIt is common to distinguish between availability, confidentiality, and integrity risks. All of these can be a risk to the business.\nBusiness processes run on data, and if they are not, they can typically be improved by using more data. We cover that in more detail in another place.\nIf the data is not available, the business process can suffer, and its value reduced.\nIf the data leaks out, the business process can suffer, and its value reduced.\nIf the data does not reflect the reality well enough, the business process can suffer, and its value reduced.\nLet\u0026rsquo;s have a look at some examples.\nYour (mobile) phone is dependent on a network. If the network is not available, too far away, or congested, you have an availablity problem, and the usefulness of having a phone to communicate drops to zero.\nAs another example consider a payment terminal: if it does not work, you can\u0026rsquo;t pay, and probably not get what you wanted to buy.\nConfidentiality is about keeping data secret. Again, the examples are not too hard to find. There are probaly pictures on your phone that you do not want to share with the entire world.\nIn a business context, you don\u0026rsquo;t want your competitors to know about your plans and pricing strategies.\nWho Suffers? Assets Vulnerabilities and threats (examples of all)\nTo be continued.\nwhat other assets? who suffers? externalities.\n","permalink":"/book/risk/intro-to-risk/","title":"Intro to Risk"},{"content":"It all starts with bits: digital units of information. It is about how we store these bits, how we move these bits, and how we transform or process these bits.\nThe three major elements of digital infrastructures are:\nStorage Networks Processors In the cloud security world, it is customary to talk about data at rest, data in motion, and data in use. This introduces data as the key common element. But more on cloud security later.\nAll of these elements have a wide variety of different manifestations, with associated quality and performance attributes that matter enormously in the design and management of digital infrastructures.\nYou\u0026rsquo;ll also have to understand that these three concepts are very entangled. A storage system is connected to a network, but it also has network and processing elements inside. The same is true for the other two concepts. Once again, it is a way to draw maps of digital systems, and any map is inaccurate. As said elsewhere, this inaccuracy actually can make it a good map! It reduces complexity so that we can more easily think about it.\n","permalink":"/book/diginfra/elements-of-digitalinfrastructures/","title":"Elements of the Digital World"},{"content":"What do roads, airports, the internet, the electricity network, and a search engine have in common? They are all services that are independent of a specific user or usage. They are provisioned on a longer timescale than that of an individual usage. And they are typically not owned by their users, or at least, not directly.\nIn this book I am mostly concerned with digital infrastructures. Their services are digitally accessible. Of the above examples, the internet and the search engine are the best examples of that. Interestingly, the other services increasingly rely on digital infrastructures themselves, or even incorporate specific digital infrastructures. An example of that are the trading platforms that enable the planning of electricity supply and demand. In many countries, electricity is a market, not a monopoly, which requires coordination between the various players.\nYou\u0026rsquo;ll also see that I talk about digital infrastructures as a service, not a product. It is not sufficient to buy a road, for example. For it to be truly useful to its users, it needs maintenance, repairs, incident management, and more. Any abandoned road will soon deteriorate without maintenance, and become useless.\nDigital infrastructures are sometimes called platforms. In the 1990s Windows was an example of a platform. A few decades later the concept of platform engineering started to be used for services that helped developers develop and deliver code faster. x It will be hard to define it with scientific rigor, in the same way that it is hard to unambiguously define what, for example, a car is. There will always be edge cases.\nWhat sets digital infrastructures apart in my opinion is that, thanks to automation, their scale, geographical reach and deployment speed can be orders of magnitude bigger than that of other infrastructures. That has a lot in interesting effects, which we\u0026rsquo;ll explore in this book.\nIn summary, digital infrastructures are about services that organisations deliver to independent consumers, while at the same time these services are subject to automation. That gives a tremendous dynamic in that relationship, and leads to new value, new power, and new risk.\n","permalink":"/book/diginfra/essence-digital-infrastructures/","title":"The Essence of Digital Infrastructures"},{"content":"In 2005 I visited my father in France. It turned out to be convenient to pick me up from the Gerona airport in Spain. And as we had enough time, we had lunch in La Jonquera.\nAt the restaurant\u0026rsquo;s checkout I noticed a peculiar array of devices: there were four payment terminals.\nI\u0026rsquo;d never seen that. From what I know, a merchant works with a bank which handles all their payments. Apparentely not over here.\nA closer inspection revealed that each was associated with a different bank. So apparently, depending on the bank that a customer of the restaurant works with, the restaurant needed to have a payment terminal associated with that.\nTo me, this does not sound optimal for the merchant. It takes money and deskspace to accomodate all those different payment networks. And if you have only one terminal many customers can\u0026rsquo;t pay by card. That won\u0026rsquo;t make them happy, and the last thing you want as a merchant is to have unhappy customers.\nAn online payment system, in this case with cards and terminals, is an infrastructure. and arguably a digital infrastructure. It serves many users: customers, merchants, and in this case the bank. One infrastructure for each bank.\nIt sounds obvious that there is a benefit in having a digital infrastructure like this that serves most banks, instead of just one. For example, you would not have to replicate installation and maintenance of those payment terminals. And indeed, in the current day and age, it seems to be the normal thing to do.\nBut apparently, it was hard to get to such a common system. So hard in fact, that it made sense for the banks and the merchants to waste all that money on replicating an infrastructure and foregoing all the benefits of a shared system.\nThere are a few hypotheses on why this is so.\nLet\u0026rsquo;s analyse this and see what causes this situation.\nFor one, services like these don\u0026rsquo;t appear out of thin air. They evolve. They don\u0026rsquo;t come into existence and remain stationary forever. There are actors and stakeholders that make them change.We\u0026rsquo;ll have to look at the actors involved and their objectives and possible actions if we want to understand how such systems look like at any given moment.\nThe main actors involved here are the bank(s), the merchants and the customers. When it comes to actual payments, these are the most important ones.\nThe banks probably expected to reduce costs and have more happy merchants and customers. And having this benefit earlier rather than later probably compensated for the higher cost of building out your own digital infrastructure for your merchants.\nWhile it would be cheaper overall to have a digital infrastructure that is shared across all banks, there seems to be a valid reason to not have that, at least not to begin with.\nMy hypotheses are: it takes time to agree on standards for interoperability and for actually setting up the service that is shared across banks. Not the least of your problems is who is going to own that infrastructure. It is likely to be a new legal entity. And that introduces a new stakeholder.\nNow back to the power dynamics that created the situation in the picture. Who benefits, who does not?\nThe banks are faced with a choice between the short term gain of realizing a payment infrastructure, and the long term gain of reducing its cost. And as they are investing, they have some power.\nThe merchant can chose between having multiple terminals, or sticking to just one, which amounts to a choice between spending money (and desk space) versus making customers unhappy.\nFinally, the choice for the customer is to pay cash or by card. The customer (and the other stakeholders) probably think that cards are a safer, and possibly cheaper alternative. The customer might therefore be led to feel that they prefer a merchant who accepts cards.\nThe banks and the merchant apparently prefer short term revenu increase over long term cost savings.\nAnd as a result the power dynamics play out so that it is the customer who benefits, the banks that invest and reap more benefits, and the merchant has to pay for a lot of that. Maybe the merchant will see some cost reduction in their payments handling.\n","permalink":"/book/diginfra/lunch-spain/","title":"What a lunch in Spain taught me about digital infrastructures"},{"content":"Deployment is everything that happens between writing software and actually using that software by its intended users. And as we get more software and more users, deployment becomes more complex.\nWhy deployment diagrams? Deployment diagrams are a great technique for communicating about important decisions in deploying software. Decisions such as who is going to do what, how are things connected, and so on.\nThere are many ways to draw deployment diagrams and many standards to choose from. UML and Archimate are just a few of them. To me, there is no single right way to create deployment diagrams. In that sense, these diagrams are more like maps. And the usefulness of a map depends on the journey that you are going to make. A map for a mountain walk is pretty useless if you want to make a railroad journey and vice versa.\nIn this section, I’m setting out to define the principles that these maps should adhere to.\nIt turns out that the actual symbols to use are not so relevant. It is more important to understand what we mean by those symbols, and how these diagrams are useful.\nWhat do we want to model? Modern IT systems are made up of many components, but all of them handle data in one way or another. Some of the important principles are that we want to understand where data is stored (at rest), where it is being processed, and how it moves from one place to another.\nWhat you want to explore is how data is connected because that tells us something about who can access which data. The converse of that is that we can also then see how things are isolated from one another. And this is a really important thing for security. If we know who is responsible for which component we can also understand who is responsible for capacity, for security, and for making it into production bringing it into production.\nWe used to think that we are connecting computers. But these days we are really connecting execution environments. An execution environment can be a computer, but it could also be a virtual machine or a container. Or it could be a Lambda function. The essence of an execution environment is that it runs code and that it is somewhat isolated from its environment. It also implies that we can then look at how these execution environments are connected.\nTake the following simple example. On the left we have a user working on the web browser, on the right-hand side, we see the web server. They are connected through the Internet. The web server is an execution environment that serves up webpages. The user’s browser is an execution environment that renders these webpages to the user. And we annotate the connection link with the protocol that is being used.\nSo we see two important concepts illustrated in this diagram: execution environments and connectivity.\nNow in a more formal notation such as UML or Archimate, this would look a bit different. Many would be able to argue about the specific symbols to use, but when I am pragmatic I am only concerned with how well the diagram communicates.\nHow detailed should your model be? A diagram is meant to communicate. It should communicate the most essential thing that you want to bring across to the people who are looking at your diagram. In this diagram, we are focusing on how the WebServer and the DNS service are probably different services. As a result, this diagram emphasizes the protocols that are being used, and the separate execution environments that are involved.\nAlternatively, we could introduce the Internet as an actor. In reality, by the way, the Internet is actually a set of actors, but we don’t show that here. What this diagram also shows, in comparison to the previous picture, is that there are multiple levels of detail on which you can draw these diagrams. Again, it all depends on what you want to illustrate.\nArchitectural decisions One of the purposes of deployment diagrams is to document and demonstrate architectural decisions. These decisions could, for example, be on the flow of data, the location of data, and where data is actually being processed. In the next example, we show how this works in a music distribution service, such as Spotify or Apple Music.\nIn your typical setup, there are three major components: the cloud-based music storage, the speaker or sound system to play the music on, and a mobile device to control it all from. This potentially gives us three connections. The first one is from the mobile device to the cloud-based music service to select the music that you want to play.\nBut how does the music get to the speaker?\nThere are two options. The first option is that the music goes from the cloud to the mobile, and then to the speaker. The other option is that the music goes straight from the cloud to the speaker. In fact, both options happen in reality. The first one describes a Bluetooth connection between the mobile and speaker, and the second one can be seen with Spotify connected speakers.\nIt is an interesting exercise to discuss the benefits and disadvantages of both options. You might also want to dive deeper into the actual protocols being used to make this work. Especially the protocols between the speakers and the rest are not so trivial.\nCloud-Native How is deployment different in a cloud-native age? To begin with, there is virtualization, there is containerization, we have functions as a service (such as AWS Lambda), we have DevOps, we have infrastructure as code, we have external services, APIs, and so on.\nAnd then we have also flexible infrastructure that can rapidly scale up and scaled-down. All of this brings complications to drawing deployment diagrams. Let’s see how we can accommodate each of these cloud-native concepts in our diagrams.\nVirtualization A virtual machine is an execution environment that lives within another execution environment, probably a physical host. Remember that an execution environment is isolated from other execution environments. A virtual machine is in complete control of the entire memory address space in the machine that it runs on. It only shares the hypervisor on that machine. That is quite powerful isolation. In fact, it also has network interfaces that are completely indistinguishable in capabilities from the network interfaces on a physical machine.\nSimilarly, a container (such as a Docker container) is an execution environment that lives within another environment. Each container is pretty isolated from the other containers that run on the same host, although not so isolated as a virtual machine is from another virtual machine. For example, containers share network port address space. This means that two containers on the same post cannot use the same IP address port number.\nIn the diagram below we have chosen not to show how the network is organized.\nNote that we have combined containers and VMs in one picture. This architecture actually happens in reality, it has its advantages. We’ve also chosen not to show any details of the underlying operating systems, hypervisors or Docker runtimes in this picture. Again, depending on what you want to communicate with the diagram, you might want to include those networking and other details.\nAutomated deployment Let’s move into slightly more advanced cases of deployment. It is pretty common these days to automate the deployment of software on any given machine. That has many advantages in terms of reproducibility, maintainability, and ease of upgrade. And that also comes with security benefits. However, it does require additional software and deployment components to get this going. That is because there are many more moving parts in this type of IT architecture.\nFor example, you need some kind of machine to deploy from, and a machine or environment to deploy to. You also need some technology to remotely deploy and configure the software. A popular tool for that these days is Ansible. Instead of typing commands on the command line, or clicking in a user interface, the configuration of the target machine is the result of a script that is executed. We say that this script is then ‘manifested’ into the target environment. As a side note, the word manifest originates from shipping, where it describes a document that lists the cargo items that are to be on the ship.\nIn automated deployment, it is very important to understand what type of infrastructure and software is created by whom or what. For that reason, we introduce a special type of relation, the manifestation relation. We signify this relation by a dashed line. Of course, there is still an underlying communication protocol that is necessary for this to work.\nIn the next diagram, the target machine is remotely configured from an Ansible playbook. On the target machine, we indicate the components and software that are to be installed there, and those should be described in the Ansible playbook. To make this a completely reproducible architecture, we also need to describe what the software components are that should be on the deployment machine to begin with. The old-fashioned flowchart symbol with the folded corner resembling a document is used to indicate where data is being stored. In this case, that is the Ansible playbook.\nCloud deployments In the previous diagram, we have simply installed the software onto an existing virtual machine. In a cloud world, however, we can go much beyond that. We can deploy what is called “infrastructure as code”, where complete architectures can be provisioned automatically. In the example below, we are using a deployment machine to run a Terraform script that automatically deploys 2 virtual machines and an internal network on the cloud provider. With the big oval, we indicate that there is some kind of ownership by the cloud provider of that part of the architecture, which also implies some isolation and control separation.\nThis diagram also shows how the Terraform script results in (is manifested to) actual deployment at the club provider. That is done through the cloud API.\nContinuous integration and delivery Next up in our journey towards ever deeper automation of software deployment, we have the continuous integration and delivery pipelines. As you might know, a continuous delivery pipeline takes software and other digital assets from a source code repository and builds it into something that can be deployed in an appropriate environment such as a cloud provider.\nThere are many examples of deployable artifacts. They could be AWS machine images, Docker images, or whatever you can think of. The artifacts are often stored in separate systems, across control boundaries. This is one of the reasons to put them outside of the pipeline.\nThe diagram shows the three major components, each of which could be under the control of a separate department or even organization. Note also how the diagram poses the question of how the build server (tagged ‘CI CD Pipeline’ in the picture) communicates with the software repository. In practice, there is some kind of trust relationship, where the build server is triggered whenever there is a commit to the repository.\nFrom the perspective of control, we see that this diagram identifies two pieces of data. On the right-hand side, we see the deployable artifact, and on the left-hand side, we see the source code repository. Different groups of people may have responsibility for these. We have taken the liberty to draw the deployable artifact as a kind of document, whereas the source code repository is depicted with the old-fashioned flowchart database symbol: the cylinder or disk. (As a completely irrelevant side note, this symbol might actually have been derived from magnetic drum memory, which ceased to be relevant in the 1960s).\nAt this point, we may feel the opportunity to combine these diagrams into one huge big diagram that allows us to see each and every detail of our full-blown architecture. It can be done of course. But often it is better to illustrate the architecture with a sequence of simple diagrams.\n","permalink":"/book/diginfra/deployment-diagrams/","title":"Deployment Diagrams"},{"content":"Detection I should have acted on the first signals more aggressively. But let’s talk about that later in this story. Here is the story of my site being infected with malware, viewed by a professional cloud security expert. So I am going to apply all that cloud security theory to it.\nThe hack led to business damage at the end of one of my webinars. In 2016, on a Friday, I did a webinar, at the end of which I had two links to my site as a call to action.\nHowever, three participants reported in the chat that they could not access those links as their corporate firewalls blocked them. Three different security programs (Microsoft, McAfee and Kaspersky) rated the site as unsafe for various reasons, ranging from detected Trojans to mention of “Malicious software threat: This site contains links to viruses or other software programs that can reveal personal information stored or typed on your computer to malicious persons”.\nSo, instead of continuing the conversation of how I could be of help to these people, and talk about my next program, I stalled. Nobody bought my program. Business lost. And my time suddenly had to be diverted to fixing this. Another loss. This is all real damage. The only upside is that I can write this article about it.\nThat was the detection phase, one of the phases of the NIST incident response process. As I mentioned, I could have found it earlier. For more information on the NIST incident response process guidance at the time of this incident, you can refer to the NIST Special Publication 800-61 Revision 2. A new version is in preparation.\nAnalysis and Eradication Now for the analysis and eradication phase. What the heck was going on? I had very little luck in getting the security programs to tell me what was wrong with the site. www.virustotal.com, which agregates reports from security providers, reported 1 hit by Yandex, though the diagnostics on their webmaster pages where vague. McAfee and Kaspersky did not seem to have any service that is helpful with this.\nIn the mean time, three more reports came in on the site, adding TrendMicro to the list of blockers. It took my site manager until Tuesday to fix it. Very disappointing. He also was not very communicative about the real underlying problem, other than that is was caused by a WordPress plugin that had not been updated. He did manage to restore the site and clean it. I think.\nAfter I discovered the problem, independently I got a report from a SEO expert, who noticed funny code in the pages, and weird statistics in the analytics. He told me that the malware was in fact a 5 year old Mozilla exploit, which is number 17974 on exploit-db (No link to that exploit, because it gives my site a bad reputation).\nIt appeared to be an automated infection targeted at Mozilla users who had not updated their browsers. My site does not store any customer data, all form submissions go to a separate autoresponder and shopping cart service. So no data was lost or breached.\nRecovery Now for the recovery phase. Malware gone does not equal business problem gone. Even as the malware is erased, my site’s reputation is still suffering.\nGetting off the blacklists is a hard process; they seem to parrot and echo each other. A week after the alleged site fix, I managed to get it off one or two engines. But it is still listed at Yandex, Clean MX, SCUMWARE and CRDF, all of whom don’t appear to have an expedient process of getting off their blacklist. http://www.urlvoid.com/scan/clubcloudcomputing.com/ actually increased the number of blacklisting sites in the past days and added Fortinet’s FortiGuard.\nOne of the engines rates my site as bad because it links to a bad site, namely itself. How Catch 22 can you become?\nSounds like a bad vigilante movie, where the main characters don’t care too much about the collateral damage they inflict. Listing malware sites is easy enough, delisting apparently is harder.\nSo this reputation might haunt me for who knows how long. Maybe the domain will never really recover.\nOn the positive side, some corporate firewalls reset the reputation after a few weeks. But be aware that most corporate firewalls are extremely paranoid, as they probably should be. Just having a simple link in my email message pointing to my homepage had that message marked as [SUSPICIOUS MESSAGE] by one of the big four advisory firms.\nPreparation Finally, back to preparation. What could we have done to prevent this, or at least reduce the impact of the problem?\nI have a backup running of this website. It is a WordPress plugin that dumps the entire site’s content in a DropBox which is synced to my PC. Weeks before the webinar, I had installed F-Secure on the PC, and it barked on one of the files in the DropBox folder. I reported this to my website manager, but I knew that it was in a part of the website that was not in use, nor accessible to the users of the website. That led me to believe it was a false positive, but I should have known better.\nIn the end, having the site itself generate a backup is not sufficient. The advantage is that the backup should be easy to restore, but malware might take the backup software or its configuration as a first target. In fact, I suspect that in my case the malware created a few hundred thousand files, which clogged my DropBox synchronization. However, I could not finish the forensics on that.\nThe site manager restored the site from a file system backup. I do not have access to that. Externally spidering the website, and versioning it may be better. At any rate, this is a case for generating fully static websites.\nSo, obviously the best direct preparations is regularly updating software and removing software you don’t need. Case in point: the malware was inserted into a piece of forum software that we never got to work properly. In the end we abandoned it in favor of a managed cloud solution (an e-learning platform).\nCloud security reference model The cloud security reference model of the Cloud Security Alliance asks us to identify who is responsible for what piece of the software stack. I don’t think there is much confusion about who was supposed to keep the site’s software up to date. My site manager never denied that he was. But he did not put in any warning system, and ignored my F-Secure warning. He also did not yet provide adequate forensics to me after the fact. Maybe a regular customer won’t need those details, I can see that. But I have professional interests beyond that, as this article proves. Of course, my site manager is not the only one responsible for the software. He did not write it. The site’s software and plugins are either commercial or open source. Both have their own update policies or lack thereof. Both can be abandoned by their developers. But somebody needs to track that too.\nManaging one custom WordPress website at a time is not likely to be a very viable business model in the long run. If your website is not very complicated functionally, you might consider static hosting, or move it to a cloud based website builder like squarespace.com or wix.com. You would still have to check their competence, but with thousands or hundreds of thousands of websites at stake, these companies are more likely to have the motivation and the resources to properly manage these risks.\nAs a business owner, I am ultimately accountable for all IT risks that affect my business. Remember, any provider, including a managed hosting provider, can fail. You need a plan B. I do have some backup of the most important documents on my site. I wrote them. But in the end, the most irrecoverable asset lost here might be the domain name. As a precaution against that, I could have considered to have the most important pages also hosted on another domain. In fact, I might have to do that, if this domain isn’t delisted quickly enough. It is a telling and disturbing sign that registrations for my newsletters these days mostly come from public email providers, not companies.\nWrapping up I am disclosing my misfortune so that it may be of help to people. Whether you work in a large corporation or a small one, are on the consumer or on the provider side, you can use this case to improve your own management of IT risk.\nWhat are the biggest lessons you should take?\nReputation damage that gets its way into the firewalls and proxies of customer companies leads to real and lasting business damage.\nExit and recovery plans can be considered on multiple levels. Sure, the basic backups matter, but at all times consider your business continuity from the top down, starting at your domain name.\n","permalink":"/book/cases/how-my-site-got-hacked/","title":"How My Site Got Hacked"},{"content":"Most digital infrastructures are meant to communicate or coordinate, or are in support of other digital infrastructures that communicate or coordinate.\nThe internet is a prime example. It is designed to enable computers to communicate by moving data packets between them.\nSocial media is another example, used by people to communicate with each other. Its success is a testament to the fact that communication is a fundamental human need.\nFor an example of a supporting digital infrastructure you can look at an IaaS provider, which enables data processing and storage for other applications and infrastructures.\nFrom a business perspective this communication and coordination can lead to value in the form of, amongst others:\nbetter resource utilization and less waste, better process efficiency, better quality of services and products, reduction of risks. These are just the major, broad categories of delivering value, and there is considerable overlap between them. For example an organization\u0026rsquo;s website helps communicate to its customers. But you can also look at it as a more efficient way to organise the coordination on the delivery of products and services to the customer.\nAs you dive deeper into business processes, you will find that there is a wide range of processes and ways that lead to business value, each of which has its own peculiar ways of communicating and coordinating. In the early days of networking, I was sometimes asked what the value of a network is. Equally unanswerable is the question what the value of a message is. It just depends on the role that such a message plays in a process. For example, if your house is on fire, you only need a small message to reach the fire department, but if it does not get there, you\u0026rsquo;ll lose a house.\nStrategy consulting firms, like the one I worked at, do a lot of work in process reengineering to create value for their clients. The larger firms have serious collections of proces improvements. Over the past decades, significant reengineering of supply chains has taken place. The core idea of that is typically that better coordination reduces risk and inefficiencies.\n","permalink":"/book/value/value-in-process-improvement/","title":"Value in Process Improvement"},{"content":"Five elements of cloud security Historically, IT security started with infrastructure security. Just protecting the data center was good enough. But that was before we had data communications.\nWhen data started to escape the confines of the data center we needed to protect it. Typically through encryption. Hence we need data security.\nAs the world wide web developed, we saw applications being exposed to it, and frankly, be vulnerable. So that is when application security started to become more important.\nWith the proliferation of applications, both within the enterprises and outside of it, keeping track of user access became more important too. That is when we start talking more about user security (or identity management).\nFinally, as we are outsourcing to more and more individual software and cloud companies, we need to structure our oversight of those service relationships. That requires governance over contracts, SLAs, and more.\nCloud computing is having an impact on all of these five elements. Some are made easier, some increase in significance, some will change shape. Watch the video for more details.\nReview this video to learn more on these five elements of cloud security. Cloud security includes IT security as we know it, but will evolve to be more mature than that. In the video I elaborate on those five as they have evolved. Then I talk about how cloud changes our approach to those five elements.\nMore in other units.\n","permalink":"/posts/5-elements-of-cloud-security/","title":"5 Elements of Cloud Security"},{"content":"How cool would it be to let an AI do some of the grunt work in analysing the risk of applications and services. This has the potential to speed up the work of risk assessors.\nBut, does it work in practice? Well, here is an example of AI-assisted risk classification. I downloaded some of the entries in the Dutch algorithm register, which is a public register of systems that use algorithms. For each entry about 30 fields are available, including name, classification, owner, et cetera. Some of the systems in the registry are AI-based. Indeed, we have AI to help check on AI\u0026hellip;\nMy approach was to do some dialogue with Claude 3.7 Sonnet on a few cases. You can get the full description of each case from the algorithm register.\nMe: Here are three examples. Please return the name of the system, and your assessment if it uses an LLM or not.\nClaude:\nI\u0026rsquo;ll analyze each of these systems and classify them as either LLM-based or fixed algorithm-based.\nVirtual municipality assistant Gem\nClassification: Uses Machine Learning, but not an LLM Reasoning: The description states it uses \u0026ldquo;supervised machine learning\u0026rdquo; to match questions with answers from a predefined library. It calculates which existing answer best matches the question rather than generating new responses. This is more characteristic of a simpler ML classification system than an LLM. AI WBSO pre-advice\nClassification: Machine Learning, but not an LLM Reasoning: The system is described as a \u0026ldquo;self-learning Machine Learning model\u0026rdquo; that makes predictions based on specific variables to estimate risk. It appears to be a predictive model focused on risk assessment rather than language processing or generation, making it a non-LLM algorithm. Energy label generator (EP-Online)\nClassification: Fixed algorithm Reasoning: This system uses predefined formulas and calculations to generate energy labels based on specific inputs. The description mentions algorithms but refers to calculation procedures described in technical documentation rather than any learning models. This is clearly a deterministic system using fixed rules and formulas. None of these three systems appear to use Large Language Models. They each use different approaches: supervised machine learning for answer retrieval, predictive machine learning for risk assessment, and fixed algorithmic calculations for energy label generation.\nMe: Which of these processes personal data, just based on the description?\nClaude:\nBased on the descriptions provided, here\u0026rsquo;s my analysis of which systems process personal data:\nVirtual municipality assistant Gem\nProcesses personal data: Yes Reasoning: Although not explicitly stated, this system interacts directly with residents and businesses through chat functionality on municipal websites. It collects questions from users and monitors their feedback. The system likely processes some form of user identifiers to maintain conversation context and improve answer selection based on prior interactions. AI WBSO pre-advice\nProcesses personal data: No Reasoning: The description explicitly states \u0026ldquo;No personal data are used in the algorithm in any way.\u0026rdquo; It mentions using data like number of projects, hours, wages, etc., but specifically notes that only the case number is used as an identification label. A DPIA (Data Protection Impact Assessment) was carried out with the outcome that no personal data were processed. Energy label generator (EP-Online)\nProcesses personal data: Yes Reasoning: This system likely processes personal data as it generates energy labels for specific buildings owned by specific individuals. The fact that a DPIA was conducted (and is being updated) suggests personal data is involved. The system records data about buildings that can be linked to their owners, especially since the labels are required when selling or renting properties. Based solely on these descriptions, the Virtual municipality assistant Gem and the Energy label generator appear to process personal data, while the AI WBSO pre-advice system explicitly does not.\n(end of chat interaction)\nThis is a promising beginning. There are around 800 of these cases to review.\nInteresting followup questions either on the entries or on the approach could be:\nIs the description consistent with its classification? For example, there is a \u0026lsquo;risk\u0026rsquo; field, but does it match the rest of the description? Which entries seem to be missing crucial information? Which entries store specific types of data? Can we automate this a bit more? Stuffing the entries in a chatbot prompt does not scale very well. What is the accuracy, and will other models have similar accuracy? ","permalink":"/posts/ai-risk-classification/","title":"How AI Can Help IT Risk Classification"},{"content":"How to fix the WiFi? How to find a new phone for grandma?\nApplying technology follows certain rules. However, many people only have an intuitive understanding of these rules. As a result technology is not optimally applied. By understanding how applying technology really works, you can be more effective, more efficient, reduce waste, and overall do a better job. It takes just a few simple steps to improve any attempt at applying technology. We\u0026rsquo;ll focus on information technology here, though most principles have wider applicability.\nLet\u0026rsquo;s start by looking at a few examples that I have used these in teaching IT students. The first example is fixing the WiFi at home, and the second one is selecting a new mobile phone for grandma. Think for a moment how you would approach these two cases. For a more corporate example you can think of replacing a content management system, or introducing a new security capability.\nThe core idea of technology is that by doing an intervention in the real world, you achieve certain desirable outcomes. This is in contract to the core idea of science, which is that by doing observations on the real world, we can derive certain conclusions that allow us to predict what might happen under similar conditions in the future. Science seeks to understand and explain the underlying principles governing phenomena, while technology applies that understanding to create tools, systems, or processes that achieve specific goals.\nOf course, science and technology are intertwined: technology relies on scientific insights to be more effective, while science often needs technology in order to do experiments and observations.\nAs our ambition is to apply technology in a bit more systematic way, let us begin to ask ourselves what it is that we try to achieve.\nNote to self: technology literally means the science of technics. In english there is not much of a distinction between the techniques and technology.\nA technique aims to achieve a certain desirable outcome. Interestingly enough, the attention is often on the technique, and a little less on the outcome. I find that focussing on the outcome first is a productive and relevant thought exercise.\nLet\u0026rsquo;s review our examples. What does fixing the WiFi mean? What result does it achieve? This could be many things. Maybe we want a better internet experience in the back of our garden, or on the top floor? Maybe we want to have higher internet speeds inside the house. Maybe we want less packet loss. Maybe we want to play our games with less ping delay, so we can win more often. Maybe we want to allow our friends easier access, or more security.\nThe essence of the result is that some measurement of quality improves for some stakeholder.\nTurning our attention to grandma\u0026rsquo;s new phone. What do we want to be improved? Maybe her current phone is too hard to navigate because the buttons are too small, or it does not run an app that allows here to see the pictures of her grandchildren. Or maybe it breaks down all the time, and your tech savvy nephew has to come over to fix it, and he does not want to do that as often anymore.\nNow we can turn our attention to the intervention. In our WiFi case, are we buying more access points, and if so, where should they go, and how should they be connected? Maybe we want to change the frequency allocations, or allow use of the 5GHz frequency bands. With grandmas phone, do we install new apps, buy a different size phone, or what?\nHow does the intervention lead to the desired result? In other words: how does one lead to the other? Maybe you have a theory about that. Maybe you\u0026rsquo;ll just need to figure it out. In both cases you start with a hypothesis that explains how the intervention leads to a result.\nFor example: because WiFi signal strength (and therefore quality) decreases with distance between device and base station, we install more base stations in order to have better quality around the house. Another example would be: because there is limited frequency spectrum, we reconfigure our existing base stations to use different frequencies in order for them to interfere less, and have better network quality within their range.\nAs you can see from this example, your assumptions, your hypotheses, matter.\nWe can morph these statements in a variety of useful ways. This is what makes for professional application of technology. Here are some variations.\nBy theory Z, we do intervention X to achieve result Y.\nWe hypothesize that intervention X will lead to result Y, in which case we can start to form a theory.\nHow does intervention X lead to desirable outcomes?\nWe are looking to achieve result Y, and we have theory Z. What does that tell us about possible interventions?\nOnce we grasp this, we can move on to more complicated scenarios. We can flesh out what a better outcome is. We can use this to do design in more complicated situations such as with more stakeholders. We can also use this to do more systematic troubleshooting.\nMore about that later.\n","permalink":"/posts/technical-meta-model/","title":"Applying technology by following a system"},{"content":"The international arena has many actors that can influence digital infrastructures. But opinions differ on what the important ones are, or even what the relevant ones are. By the nature of scaling, very few digital infrastructures are influenced by national actors only. The international arena is complex, and there are even conflicting views on how it is made up. These conflicting views can best be seen as maps of the territory. And as I have mentioned earlier, a map is only relevant for a specific purpose.\nThe first category of actors is nations, obviously. The word nation is part of the word international. But we can see many other actors exerting influence, such as multinational corporations, NGOs (non-governmental organisations), treaty organisations, and so on.\nNations make laws, multinational corporations make investments and offer products, NGOs such as ISO make standards, treaty organisations such as the EU make more standards and regulations. And sometimes these are conflicting.\nNot everybody shares this multifaceted view of the international arena. Some hold that nation states are the only actors that have real power. After all, they control the territory on which people live, and have a monopoly on military force and a legal monopoly on violence.\nThrough law and agreements within and between nations, the other actors are enabled. Multinational corporations don\u0026rsquo;t really exist in this view. They are constructs enabled by agreements between nations, for example on recognizing property across borders. How is it possible that a national of one country can hold property in another country? This is not universally the case. Many countries do not allow this, at least not unlimited.\nA multinational corporation, even if it has public shareholders across the globe, has a primary residence somewhere. And the legal options and obligations trickle down from there.\nSimilarly, NGOs such as ISO (International Standards Organisations) and the International Criminal Court are also established somewhere, and recognized by other countries, or not, as the case may be.\nDigital infrastructures don\u0026rsquo;t necessarily map easily to a single organisation running them, or even governing them. The internet is a interesting and complicated example. On a day to day basis, internet service is largely provided by telecommunications companies owning the cables and radio base stations. Administering the coordination between these and other providers, for example on IP adresses, is done by a non-profit established in the US. But there are many more players in that space, often independent.\nIn contrast to the multi nation view of the world is the perspective that what really matters in the international arena are the multinational corporations. They have significant control over the international flow of goods, services and investments. Understand that many of these corporations have annual turnovers that are larger than the gross domestic product of 80% of the world\u0026rsquo;s countries.\nLarge businesses have the capability to drive government policies. Even US presidents see that. President Eisenhower warned about the military-industrial complex in 1961. President Biden extended that, and warned against the power of the tech industry and AI in particular in his last speech in 2024.\nThis is not hypothetical. There has been succesful lobbying by US companies against international regulation that is seen as limiting to them.\nMany multinational organisations are largely legitimate, but there are quite a few whose main objective is to launder money outside of the control of nations. Beyond that, when it comes to cybersecurity, internationally organised crime has business models that include ransomware extortion and bitcoin mining on hacked computers.\nThen there is the perspective that the only really important international actor is the US. With more than 700 military bases in more than 80 countries, this is the single largest international military presence in the history of mankind. Additionally, since the end of world war II, the US has alledgedly intervened in dozens of countries, through military or other means, three times more than Russia, the next contender.\nFinally, it is conceivable that there are people who think China has always been, and will be, the economic superpower of the world, with a brief 200 year interuption which is about to end.\n","permalink":"/posts/international-actors/","title":"International Actors"},{"content":"Who is really doing Zero Trust?\nWell, the US Air Force is. Here is my summary, with some comments, of their strategy document for the benefit of my Certificate of Competence in Zero Trust (CCZT) learners. In fact, this is an edited version of a conversation we had during one of our classes.\nYou can download the full strategy here, and the current roadmap here, all linked from this page.\nI think the fundamental first important point about the strategy document is that it exists at all. There is an actual organization of significant size that has a strategy and is implementing it. Many can learn from this.\nThe second major point is that its terminology and even its conceptual frame of reference is almost 100% CCZT compatible. Even better, it lists more specific initiatives than the Zero Trust courseware itself. So rather than talking about a strategy, it actually is a strategy with strategic goals and sub-goals that match.\nI am not repeating the strategic goals and subgoals here. They align with CCZT, and the strategy document is succinct enough.\nData is considered to be the strategic asset to protect. It is really focussed on protecting the data. Side note: for regular organizations, it is actually quite hard to have a top-down understanding of the value of data. Anyway, the focus on data represents a shift away from a network centric security strategy. In fact, the current strategy is defined as network focused, defense in depth, castle and moat.\nBenefits Already in the summary it mentions three important benefits of the strategy, instead of just saying \u0026ldquo;We need to be more secure\u0026rdquo;.\nReduction of architectures Unlock access Impose higher costs on adversaries The strategy summary states that it reduces the number of architectures. Later in the document, it\u0026rsquo;s a bit more specific about that, saying there are too many point solutions and stop-gap measures across that entire network. This is what happens - you start with a low-security network and then as you mature your requirements, if you don\u0026rsquo;t have an overall strategy, you get all these point solutions and they are expensive simply because you have so many different ones. So the zero trust strategy has, as one benefit, that you will have less of these.\nIn IT, migrating from a functioning system to a new one rarely has a strong business case. As a matter of fact, that\u0026rsquo;s true for a lot of technology. If it ain\u0026rsquo;t broke, don\u0026rsquo;t fix it. That\u0026rsquo;s for a number of reasons. One of them is the business case: it is too costly. But if you\u0026rsquo;re not happy with the current situation, you have a change imperative and the business case changes because your migration cost is a sunk cost and no longer something that needs to be recouped.\nThe most important functional benefit mentioned is that it unlocks access. And a little later it explains: \u0026ldquo;to shared and trusted information.\u0026rdquo; This is enabling warfighters. Well, also a lot of other roles. But the mission of the air force is to fight, or at least demonstrate the capability to fight, which is probably even more important than the actual fighting. It\u0026rsquo;s fairly obvious that you want to do this in quite adverse network circumstances. They even have an abbreviation for that - DDIL (denied, degraded, intermittent, and limited) - for situations where you may or may not have a connection to your drone, for example.\nThe third one that I liked from a security mindset perspective is that it imposes higher costs on adversaries. They don\u0026rsquo;t say we need to protect ourselves from adversaries, because that is not a goal that has a measurable KPI. It\u0026rsquo;s hard to say \u0026ldquo;okay, we\u0026rsquo;ve reduced our exposure to adversaries.\u0026rdquo; The adversaries are all over the place. In fact, without adversaries, you wouldn\u0026rsquo;t need to have an air force.\nSo what they\u0026rsquo;re saying is, okay, our defensive strategy is based on increasing the cost of the attacker to attack us. This is military doctrine - you end a war when the enemy no longer wants to fight you. That\u0026rsquo;s the military definition of ending a war, dating back to Sun Tzu. One way of doing that is raising the cost for them to continue attacking you.\nSo I liked these benefits very much. I think they\u0026rsquo;re understandable on a strategic level.\nScope In terms of coverage, the strategy sometimes looks like buzzword bingo. First of all, it mentions all new developments like AI and IoT. It includes top secret data and operational technology. Cloud and mobile is included, even non-IP devices. Microservice architectures.\nIt acknowledges that more endpoints are moving to the cloud.\nOld is new again? The strategy contains a lot of elements that you already see in mobile security infrastructures that are being build these days. Mobile, cloud, \u0026rsquo;new way of working'.\nIt is a theme that we\u0026rsquo;ve seen before - zero trust isn\u0026rsquo;t about reinventing the wheel. It is not about reinventing all great tactical security stuff we already know. Most of that is still useful.\nZero trust is a more comprehensive and consistent approach to stuff that we already know.\nPotentially a new technology that is explicitly mentioned is SDP (software defined perimeter). But even that has its roots in earlier technologies such as the knock knock protocol. SDP is a more structured variant of that.\nSDP is fairly directly stated as a tool to eliminate VPNs. This is a substantial driver of the benefits mentioned.\nMaturity and automation Section three includes a small maturity model, in which an important dimension is \u0026lsquo;automation\u0026rsquo;. In the document, the mantra is repeated regularly: we do this initially with manual efforts but we must evolve to a real-time and automated approach. I think the nice thing here is that it acknowledges that you need to get started on it and don\u0026rsquo;t overautomate in the beginning, but that manual processes are not sustainable in the long run.\nYou don\u0026rsquo;t want to automate what you don\u0026rsquo;t understand. So there\u0026rsquo;s a fine line there. As a matter of fact, I\u0026rsquo;ve written earlier about this in the context of automating system management and network management. And one of my former colleagues had a PhD thesis of which that was the most important result.\nThe big elephant Another interesting point, the ramifications of which are not immediately clear, is that without mentioning Microsoft, the document states: \u0026lsquo;We have Active Directory Domain Controllers all over the bleeping place.\nThis is the Microsoft Active Directory architecture where every location has its own domain controllers - and this is archaic because this is from the period that you had flaky connections to offices. In the old time at banks where I worked, every office had an active directory domain controller. In fact, two because of high availability requirements. But it\u0026rsquo;s an attack surface. The Air Force says we have over 180 sites, so we have more than 360 attack surfaces.\nOne of the stated objectives of the strategy is to drop the dependence on these Domain Controllers. Now, how they are actually going to do that, it doesn\u0026rsquo;t say, but I thought it was a really interesting point to make.\nLogging and shared responsibility What I liked also is the emphasis on comprehensive security event monitoring and logging, including application security events.\nThey also highlight the need for a \u0026lsquo;shared responsibility model\u0026rsquo; for handling those events, involving both external security service providers and internal security operations centers. I think that\u0026rsquo;s a nice frame of mind or a nice thinking model on how to roll that into your architecture.\nGovernance and risk Strategy can be a theoretical exercise. How do you pull this off in reality? The final part of the paper prescribes how the responsibilities for the implementation are delegated to various offices and units within the Air Force organization. A dozen of them are mentioned, and it even spells out where some of the deconflicting of priorities is going to happen. Deconflicting is a core element of governance - that you find out: where are the conflicts and how do we actually handle them?\nInstitutional resistance to change is identified as the greatest risk, as it requires \u0026lsquo;all communities to adapt in uncomfortable ways.\u0026rsquo;\u0026quot;\nAmen.\nOpen ends In a couple of places, it says we need to do discovery of everything on the AFIN - the Air Force Information Network. And then somewhere else, it says we have a cloud-first priority. My question: wait a minute, are those cloud services part of the Air Force Information Network or not? It depends a little bit on your definition of what a network is. This is, by the way, not new for this document. I\u0026rsquo;ve seen that ambiguity over the past 30 years in a couple of other ways and places. Is the network the stuff that routes packets? Is it everything that you can reach from a certain device? Is it all the servers? Does it include all the clients?\nIt\u0026rsquo;s a little less clear how that works. So there are some loose ends on the edge of the strategy.\nWhat I also did not see is how progress is going to be measured, and how you would audit or assess that.\nIn conclusion: read this if you are interested in enhancing your IT-based capabilities while reducing your security costs.\n","permalink":"/posts/airforce-zero-trust-strategy/","title":"The US Air Force Zero Trust Strategy"},{"content":"Risk: LMS 3-2\nCERN data center\nverhaal over corporate en MKB\nHow technical debt works: negative investment externalities.\nBut of course you have this discussion on shared services. As a matter of fact, I keep talking about the book that I\u0026rsquo;m probably not going to finish, but it\u0026rsquo;s still a nice frame of reference. Now digital infrastructures at scale - there are a few very essential elements in there. The most important elements are: one, that you have a separation between a provider and multiple consumers; and two, that that service is digital, which means that it\u0026rsquo;s amenable to automation. These two together give a really interesting socio-political economic dynamic. And that\u0026rsquo;s what you need to understand if you want your shared service to keep operating - or if you don\u0026rsquo;t want it to operate, but that\u0026rsquo;s a different story.\nIkigai\nOnderwerp: power, vendor lock-in\nTop search op CCC: certs, deploy, saas canvas, top 8 enisa.\nDe shared services business case. Voorbeeld Haven ook (journal feb 2025). Lees ook input van Robert (?)\nTechnology power shifts.\nIn the early 90s I saw the PC revolution come up and shortly afterwords client-server computing, including all the things that went wrong. A little later, the Internet revolution from boom to bust, and back up again. Then, early 10s, cloud computing exploded, and I started teaching cloud security. All of these led to dramatic shifts of power in organizations.\n","permalink":"/snippets/","title":"Snippets"},{"content":"Agile development is all the fashion nowadays. Why is that and what kind of digital infrastructures does that require? Back in the old days, business software was primarily written to automate existing business processes. Those processes might change somewhat as a result, but in the core processes were no different. Think accounting systems, scheduling, \u0026ldquo;customer relationship management\u0026rdquo; and so on.\nToday we see that software not only automates these business processes, but becomes part of the product, or even becomes the product itself. And on top of that, this software is often an on-line service. Think of the smart room thermostat. Or financial services, where software increasingly is the main part of the product: think online banking. And in social media from Facebook to Tindr, software really is the product.\nThe dance Every product changes the world that uses it. Think how cars have changed the way people commute, or even choose where they live. Software is no different. But a changing world also changes the products we can use or want to use. There is a kind of dance between supply and demand. Do we have breakfast out of our house more often because there are more opportunities for this or does the supply of breakfast places increase as a result of us going out more? Just as in a dance, it is not always easy to tell who is leading who.\nBecause software now has become the product it will also participate in the dance, and then it becomes more important to quickly adapt to the dance partner. As a developer, you change the world that uses your software in ways you cannot always predict, so in reaction you have to adapt to that world.\nThe faster the better.\nThis explains the need for agile development. Between idea and realization (time to market) there should not be two years, but only two weeks, and preferably less.\nWhat kind of digital infrastructures does that require? The prime objective of digital infrastructures is to enable the deployment of application functionality. The quality of digital infrastructures used to be measured in the number of users it could support well. I.e. we used to talk about a system supporting 10.000 concurrent users with less than 4 seconds response time.\nBut agile development comes with a new goal: \u0026lsquo;feature velocity’. That is the speed with which new features can be deployed. The time between inception of a feature and its deployment to a large user base has to be shorter than the time it takes for the environment to change. In a dance you want to anticipate your partner, not stand on her toes.\nYour digital infrastructure should not be a bottleneck. This requires features such as automated testing, quick scaling up and down of resources, and as little manual intervention as possible. This is the only way to shorten the lead time for a change.\nCloud computing In summary: agile development requires cloud computing. Remember: the essential characteristics of cloud computing include fast, elastic and self-service provisioning of resources. That is what is required for agile development.\nAnd then the dance continues. Because if we can do that, we can do other new things. Like better security. If you can respond quicker to new functional requirements, you can also respond quicker to security issues.\n","permalink":"/book/diginfra/agile-requires-cloud/","title":"Agile Requires Cloud"},{"content":"Agile development is all the fashion nowadays. Why is that and what kind of digital infrastructures does that require? Back in the old days, business software was primarily written to automate existing business processes. Those processes might change somewhat as a result, but in the core processes were no different. Think accounting systems, scheduling, \u0026ldquo;customer relationship management\u0026rdquo; and so on.\nToday we see that software not only automates these business processes, but becomes part of the product, or even becomes the product itself. And on top of that, this software is often an on-line service. Think of the smart room thermostat. Or financial services, where software increasingly is the main part of the product: think online banking. And in social media from Facebook to Tindr, software really is the product.\nThe dance Every product changes the world that uses it. Think how cars have changed the way people commute, or even choose where they live. Software is no different. But a changing world also changes the products we can use or want to use. There is a kind of dance between supply and demand. Do we have breakfast out of our house more often because there are more opportunities for this or does the supply of breakfast places increase as a result of us going out more? Just as in a dance, it is not always easy to tell who is leading who.\nBecause software now has become the product it will also participate in the dance, and then it becomes more important to quickly adapt to the dance partner. As a developer, you change the world that uses your software in ways you cannot always predict, so in reaction you have to adapt to that world.\nThe faster the better.\nThis explains the need for agile development. Between idea and realization (time to market) there should not be two years, but only two weeks, and preferably less.\nWhat kind of digital infrastructures does that require? The prime objective of digital infrastructures is to enable the deployment of application functionality. The quality of digital infrastructures used to be measured in the number of users it could support well. I.e. we used to talk about a system supporting 10.000 concurrent users with less than 4 seconds response time.\nBut agile development comes with a new goal: \u0026lsquo;feature velocity’. That is the speed with which new features can be deployed. The time between inception of a feature and its deployment to a large user base has to be shorter than the time it takes for the environment to change. In a dance you want to anticipate your partner, not stand on her toes.\nYour digital infrastructure should not be a bottleneck. This requires features such as automated testing, quick scaling up and down of resources, and as little manual intervention as possible. This is the only way to shorten the lead time for a change.\nCloud computing In summary: agile development requires cloud computing. Remember: the essential characteristics of cloud computing include fast, elastic and self-service provisioning of resources. That is what is required for agile development.\nAnd then the dance continues. Because if we can do that, we can do other new things. Like better security. If you can respond quicker to new functional requirements, you can also respond quicker to security issues.\n","permalink":"/book/value/agile-requires-cloud/","title":"Agile Requires Cloud"},{"content":"The sheer separation of the providers from the consumers of these infrastructures drives a lot of the value.\nImagine stringing a wire to connect your PC to your neighbour\u0026rsquo;s PC in order to play a game together. People have been doing these things. How long does that take? What is the cost? Where do you buy the cable? How are you going to run that cable? It is a lot faster to just use the internet for that.\nThe introduction of a separate provider changes the provisioning process. For one thing, the provisioning can go much faster. The provider has capacity (stock so to say) that can just be used. Related to that is that the service is already defined by the provider. Instead of designing it from scratch, you just pick one of the options offered. Presumably, that option has had a lot of design and thinking behind it already. It is likely to be a better option than anything that you can think of yourself.\nSo, that brings value: it can be faster and better than your homegrown alternatives.\nBecause the provider has multiple consumers, there are economies of scale that play out. Whole books have been written on this, and we will be looking into that in more detail. Think of sharing of unused capacity. Not everybody is using their internet link to the max all the time.\nBut \u0026lsquo;digital\u0026rsquo; brings more specific benefits. It is the opportunity to automate service delivery that has immense effects on economies of scale. Think about it: if a piece of software does its work, replicating that piece of software across a lot of servers is a neglible amount of effort in comparison to creating that software, typically. In contrast, baking 1000 pizzas is a lot more work than just baking one or two.\nFinally, consumers can find value in being connected with other consumers. The value of a phone or social network to the individual users, not just the network owner, increases with the number of other users connected to it. As a result the value of the network increases quadratically with the number of users. This has implications for the power balance, as we will discuss later.\nIn a later unit we\u0026rsquo;ll discuss some of the words that economists use for these phenomena, such as investment externalities and network externalities.\n","permalink":"/book/value/intro-to-value/","title":"Provider Value"},{"content":"Here is the draft design of the graphic novel version of this book, which may or may not happen..\n","permalink":"/posts/graphic-novel-page1/","title":"Digital Infrastructures - the graphic novel"},{"content":"One of the key aspirations of Digital Infrastructures at Scale is to equip you with the tools to shape and drive change in your professional environment—especially when your goal is to lead a transformation.\nTwo important positions of influence in IT are architects and auditors/assessors.\nIT architects are builders. They design new applications, platforms, and infrastructures that enable businesses to operate more effectively. A CRM system, for example, is not just a technical solution—it transforms workflows, communication, and decision-making. Similarly, infrastructure architects create digital foundations that accelerate the deployment of such applications.\nAuditors and risk assessors, on the other hand, focus on preventing failure. Every technology introduces risks, and without proper attention, these risks can derail progress—whether through security breaches, compliance fines, or operational breakdowns.\nBoth roles involve power. Without power, things will not move in the way you want, and every initiative encounters resistance. Understanding the sources of power—and the forces that push back—is essential for you to achieve meaningful outcomes.\nMoney is a form of power, but it is often a blunt instrument. In organizations, other forces—such as survival and strategic priorities—can be even more influential. The key to driving transformation is linking these forces together with precision.\nThis book provides you with the frameworks, insights, and real-world examples to navigate these challenges and drive successful change.\n","permalink":"/book/power/positions-of-power-it/","title":"Positions of Power in IT"},{"content":"The AI landscape has many digital infrastructures.\nLet\u0026rsquo;s explain this step by step and focus on which data is stored where, and how it is processed.\nA core element of AI systems is a trained model. At least that is true for the dominant AI form these days: deep learning neural networks.\nA trained model is the result of processing a lot of training data by a specific neural network. These models are fixed in size, but typically very big. The smallest useful models are close to a Gigabyte, while recent public chat models run into multiple Terabytes.\nA trained language model is effectively a piece of software. You feed it text, and text comes out. This is called inferencing, and it requires that the entire model fit into RAM memory. Only for the most minimal cases is this possible on a high end laptop. For more interesting use cases you\u0026rsquo;ll need a lot more hardware. Therefore there is a good business case for sharing this across many users.\nblock-beta space in space llm:2 space out space in[\u0026#34;Prompt\u0026#34;] --\u0026gt; llm[\u0026#34;Large Language Model\u0026#34;] llm--\u0026gt; out[\u0026#34;Completion\u0026#34;] style in fill:#fff,color:#000,line:#000;stroke-width:0px,color:#000,stroke-dasharray: 5 5 style out fill:#fff,color:#000,line:#000;stroke-width:0px,color:#000,stroke-dasharray: 5 5 In cloud terms, we would call this Inferencing as a Service. In the NIST model, we\u0026rsquo;d call this SaaS or PaaS, depending on whether is it consumed directly or as part of a larger application.\nThis gives us the option to look for this on the market, or create a shared service inside an organisation or group of organisations (e.g. private / community cloud). It also implies that we need to have a clear definition of the service and related service level objectives. This includes any allocation of security responsibilies.\nMore at: https://www.cloudsecuritynewsletter.com/p/securing-ai-applications-in-cloud-what-are-we-really-securing\n","permalink":"/book/diginfra/digital-inf-ai/","title":"What are AI digital infrastructures?"},{"content":"Building Our Own Cloud Kootwijk: Rethinking Digital Sovereignty In the Netherlands, we are currently engaged in a heated debate about the undesirable dominance of big tech, particularly over a significant portion of the digital infrastructure of the Dutch government. This includes email, file storage, and many other forms of digital storage and processing—most of which are handled by American big tech companies.\nI am sure a similar debate is going on in many other countries.\nGiven this reality, what can we do about it? How can we build our own \u0026ldquo;Cloud Kootwijk\u0026rdquo;?\nExploring Alternatives Setting up a comprehensive, government-funded solution does not seem like a viable approach. History has shown many failures in such attempts. Moreover, our current procurement processes do not lend themselves to agility. Due to the scale involved, any such initiative would likely end up with a large, well-established company.\nThis brings us to another challenge: every big tech company is, or ultimately becomes, an American company. The two largest software markets in the world are the U.S. and Germany. Even the largest German IT firms cannot afford to ignore the American market and are often listed on U.S. stock exchanges.\nAs a result, every big tech company—directly or indirectly—falls under the control of the U.S. government, regardless of its political orientation at any given time.\nRethinking the Approach With this in mind, we need to rethink our strategy. If big tech is not the answer, how can we organize \u0026ldquo;small tech\u0026rdquo; in a way that makes it a viable alternative for a large-scale buyer?\nWe are talking about digital infrastructures that are essential to the functioning of our society. These infrastructures have a certain \u0026ldquo;commodity\u0026rdquo; nature and do not primarily revolve around innovative applications. In principle, they should be deliverable by multiple companies.\nThere is no fundamental barrier to IT services being provided by a consortium of service providers. In fact, this is how the Internet has operated for decades. Its core consists of open standards that facilitate a market of service providers with sustainable business models. To prevent monopolization, these markets need some level of regulation, including enforcing open standards for interoperability and portability. In the case of strategic autonomy, additional rules regarding ownership of these companies may also be necessary.\nWhile having much of the underlying software available as open source would help, it is not essential. Open source is neither a sufficient nor a necessary condition for interoperability and portability.\nOpen standards (ideally with open-source reference implementations) are more important. They also contribute to another critical element of \u0026ldquo;small tech\u0026rdquo;: building sufficient expertise.\nKnowledge as the Foundation of Autonomy In my view, IT services consist of hardware, software, and systems management . Management can be broken down into processes and skilled personnel. Most of these elements are either commodities or readily available.\nFinding enough personnel competent in the relevant technologies is more challenging, but not impossible.\nTo achieve a sufficient level of autonomy in digital infrastructures, we need to develop and maintain this expertise. The best way I know to do this is to start small and scale up. Expanding by a factor of ten at each step is an ambitious yet achievable goal. This points towards managing our digital infrastructure through a consortium of smaller companies. The VNG’s Common Ground and Haven initiatives offer promising examples in this direction.\nA Call to Action I challenge both policymakers and society to launch a production pilot using a fully open-source office automation environment. I believe we could select the necessary open-source components for such a pilot in an afternoon. Managing this at a scale of 1,000 active users would be an excellent starting ambition. This will take months—perhaps longer—but if successful, it will provide a blueprint for a \u0026ldquo;Cloud Kootwijk\u0026rdquo; should the need become urgent.\nWill this be painful? Yes. But not as painful as realizing too late that we have lost our democracy and prosperity to a foreign power—or worse, to a group of multinational corporations that are not even under the control of any state.\n","permalink":"/posts/how-can-we-achieve-autonomy/","title":"How Can We Achieve Autonomy Over Our Digital Infrastructures?"},{"content":"This book has been more than thirty years in the making. The two main reasons for that, as I look back on that now, are that the field of Information Technology has been developing incredibly rapidly, and that I did not see the opportunity within my business to create a focus for which writing a book would make business sense. And if I did, the focus never seemed to last very long.\nInstead I wrote smaller pieces from time to time, as well as lots of educational materials, triggered by a need from my learners.\nI did try to create a larger, organised collection of knowledge, and even had a basic taxonomy in place and raw input. But the dynamics of my professional life continuously outran my plans to turn it into a book.\nI have occupied myself with IT for over half a century now, arguably most of that in a professional capacity. For a substantial part of that time, I have been searching for some focus. It took me until the turn of the millennium to finally get an expression of that in the form of a professional branding statement. It was an interesting process to come up with the following.\nPeter van Eijk is an innovative ICT strategist who makes connections between business, people and technology. With wit and confrontation he guides you to new approaches. He is inimitably hard core Internet oriented, yet never forgets that communication is between people, not machines.\nThat message has served me well for a long time. And in fact it was the basis for the name of the business I set up in 2005: \u0026ldquo;Digital Infrastructures\u0026rdquo;. I would like to think that I made up that phrase, because it has taken up a life on its own on a much larger scale, but in 2005 there was already a small IT company serving the local dentists in Oregon by that name. Still, I am fairly confident that through my former colleagues its use has accelerated.\nNevertheless, \u0026ldquo;Digital Infrastructures\u0026rdquo; is too broad a concept to serve as the title for an attractive book. \u0026ldquo;Cloud Computing\u0026rdquo; was a term with much wider appeal, and it has served me well. Around 2010, my business pivoted to cloud security training, which I have delivered in many countries over many years to many people.\nCloud computing resonates with me, because it blends technology with business, and you need to understand both in order to truly understand its risks and benefits. I loved bringing this to professionals of all levels of experience. I even took a side job as Associate Professor of Cyber Security and Cloud at the Hogeschool Utrecht to bring it to the next generation. If one thing, that position greatly helped to develop my thinking on how to educate people in professional IT skills.\nBut all good things come to an end.\nTechnology develops in waves, is never stable, and cloud computing is now mainstream. I feel that this is one of the causes of the demise of my training business, which happened during and after the covid-19 pandemic.\nAt the same time, this adoption of more IT in general, and more cloud computing in particular, in businesses worldwide has raised the stakes. IT is becoming essential to many businesses. Marc Andreesen\u0026rsquo;s 2011 essay \u0026ldquo;Why software is eating the world\u0026rdquo; already outlined why many businesses are effectively IT and software businesses. A decade later this has only become more true. And current day geopolitical tensions are spilling over to the digital domain in many different ways. There is no lack of importance in being able to navigate this space.\nHow to make sense of this, and how to position myself in a new and helpful way then became my question of urgence. Obviously, understanding of technology and business has an important role in this, but it started to become more and more clear to me that power dynamics are another important key to mapping the development of IT, its value, and its risks.\nThe idea of more writing came back.\nNo longer constrained by my focus on cloud security, I felt liberated to review some of the earlier writing I had done in this light. I also allowed myself to let go of aiming for the \u0026lsquo;final answer\u0026rsquo;, and instead see writing as a tool to understanding. \u0026ldquo;Writing to Learn\u0026rdquo; by William Zinsser was inspirational for that. And AI chatbots turned out to be a good tool for externalizing my inner critic, so it no longer interfered so much with getting all these ideas out of my head, and into the public light.\nStill, I don\u0026rsquo;t see this book finished soon. At the same time, I am working to make every draft useful to its intended audience.\nFor decades people have trusted me to help them and their teams be more successful in their handling of IT. In these writings I try to open up my mental toolbox for that. Scientific rigor isn\u0026rsquo;t my main objective, though I try to make clear what my assumptions are. I am more a conceptual pragmaticist. Can we make something that works and is useful, and do so by applying some universal truths? I also strive to make that set of concepts simple and powerful. I am assuming that you will find that toolbox very relevant in your role, and that you may not have had a formal education in any of the areas that I outlined above. In the introduction of the book you\u0026rsquo;ll find more elaboration of that.\nI sure hope you find it useful.\nMy thanks go to many people. Professionally, my clients, learners, colleagues, readers, and even chance encounters at conferences, have taught me so much by providing me with insights, inspiration and criticism (even if it hurt). It goes to show that, contrary to what many people believe, technology is a teamsport.\nI am grateful that you have come so far in reading this already, and the opportunity to share my experiences, and look forward to helping you uncover new ways of navigating the complexities of the digital age. I sincerely hope that you will find benefit in this.\nThanks for joining me.\n","permalink":"/book/preface/preface/","title":"Preface"},{"content":"Zero Trust Architecture is an approach to better cybersecurity. To many, it seems daunting to implement. But it does not have to be hard to start.\nConsider this hypothetical situation.\nYou have an application with hundreds of thousands of sensitive records, let’s say client records. We assume that in this example it seems hard to implement MFA (Multi Factor Authentication) on it. What other controls can you implement to reduce the assumed trust? We can use the Kipling method, which is at the core of Zero Trust architectures, to engineer better controls. In short, the Kipling method is about the \u0026lsquo;who\u0026rsquo;, \u0026lsquo;what\u0026rsquo;, \u0026lsquo;when\u0026rsquo;, etcetera of allowed communication.\narchitecture-beta group exec(server)[Execution environment] service users(cloud)[Cloud Users] service fw[Firewall] service app(database)[App] in exec users:R --\u0026gt; L:fw fw:R --\u0026gt; L:app We want to allow specific access for specific use cases and be explicit about it. However, to focus our efforts, it makes sense to also identify that our biggest risk is the exfiltration of a lot of those sensitive records: a data breach.\nThe allow rules Let’s begin with the ‘who.’ Who is accessing the information? The application in our example probably does authentication and authorization of users. Where do these come from, and how accurate is that information? Ideally, this comes from an up-to-date corporate directory, but even if it’s not, you can, for example, ask how quickly a departing user has their access revoked.\nThen the ‘what’. Which application and resources are we accessing? What are specific users allowed to do? As part of operational risk management, we have probably already identified who, based on their role, can modify records or do other critical actions. But think one step further. As our main fear is exfiltration of large amounts of data, we can look at where we can control that. Maybe we can disallow large downloads, for example, except when a timely ‘four eyes’ approval is in place.\n(By the way, I think it makes sense to look at large downloads as a risk separate from small data leaks. After all, many employees have access to small amounts of information, and that risk is typically already accepted).\nMoving on to the ‘when’. It can reduce risk to limit access to specific times of the day for most users. There is not necessarily a reason to allow more.\nNext is the ‘where’. Where are the users and the application located? Our case description does not give us a lot of information here. The application could be a server, which then has an IP address. And through a firewall combined with a geographical information feed, we may be able to restrict access to users based on their location.\nThe ‘why’ stands for the business reason. In this case, our data is sensitive, and we don’t want it to be exfiltrated. And in our analysis, we have identified several possible controls.\nHow: One layer of enforcement of this would be in the application itself. In the Zero Trust jargon, we are putting a Policy Enforcement Point in the application logic.\nThe mirror allow rule However, there is also another set of ‘allow rules’ that is often overlooked. I am tempted to call these the ‘mirror’ rules, but it is not a standard Zero Trust term.\nThe data and the application reside in a compute environment, for example a server. There may be malware running in that server. After all, one of the tenets of Zero Trust is ‘assume breach’. If the server has permission to access anything on the internet, that malware might easily exfiltrate large amounts of data.\nIn addition to looking at the user accessing the data, we are looking at the place where the data resides and see if its compute environment can access the world, and thus exfiltrate data. This is the mirror image of the first rule: you could say that subject and target are switched around.\nWe can apply the same Kipling method from the perspective of that server (or any compute environment that has the data in it). What is it allowed to do?\nThe ‘who’ then is the server, and there are various ways to identify it, depending on how it is set up and how we want to control what it can do. It can be an IP address or domain name, for example.\nWhat can the server access? The more limited that is, the better. It should probably be capable of logging somewhere, but it needs only limited DNS and internet access. There are likely to be integrations with other systems, but these should be enumerated and controlled.\nWhen can the server initiate contact? This seems less relevant to restrict, because logging and many integrations can be operational at any time.\nWhy is this access needed? As said earlier, any compute environment must be able to connect to certain other services for its functional operation. Yet that does not imply that it needs broad uncontrolled network access. And there are known cases of abusing overly permissive egress.\nHow can this rule be enforced? One way would be at the outer perimeter of the network, although it is also conceivable to do it through a dedicated firewall or a (network) security group in a cloud environment.\nWhat is the benefit here? In this example we have looked at a specific case of data that we want to protect. The Zero Trust approach and the Kipling method led us to various options that we have. These options allow us to hammer out implicit trust in an existing application.\nThe nice thing is that we can rate and rank these options based on their effectiveness, cost, and feasibility, all while focusing on one specific strategic asset that we want to protect. This is in stark contrast to a traditional approach where you start with strengthening the perimeter and just hope that this will have an impact on the one application that you want to protect first.\nImplication for maturity What we can also illustrate with this story is that, even though we can start with an individual application, many of these controls will become better and cheaper if there is some maturity and shared services in the organization. Reliable user identities are helped by proper federated identity management. Fine grained network access rules are easier to do if there is more software defined networking.\nMaturity is an investment, but it pays off in cheaper, faster and better security. That is another tradeoff that this example illustrates.\nFor more information on Zero Trust, visit https://cczt.clubcloudcomputing.com\nAlso published at https://www.linkedin.com/pulse/retrofitting-zero-trust-existing-application-peter-hj-van-eijk-zjpte\n","permalink":"/book/risk/retrofitting-zero-trust-existing-application/","title":"Retrofitting Zero Trust on an existing application: an illustration"},{"content":"A diagram should automagically appear here.\n%% icons from https://iconify.design architecture-beta group api(Storage)[API] service db(database)[Database] in api service disk1(disk)[Storage] in api service disk2(disk)[Storage] in api service server(server)[Server] in api db:L -- R:server disk1:T --\u0026gt; B:server disk2:T -- B:db block-beta in space llm:2 space out in[\u0026#34;Prompt\u0026#34;] --\u0026gt; llm[\u0026#34;Large Language Model\u0026#34;] llm--\u0026gt; out[\u0026#34;Completion\u0026#34;] style in fill:#fff,color:#000,line:#000;stroke-width:0px,color:#000,stroke-dasharray: 5 5 style out fill:#fff,color:#000,line:#000;stroke-width:0px,color:#000,stroke-dasharray: 5 5 ","permalink":"/posts/mermaid-example/","title":"A mermaid diagram example"},{"content":"Public cloud migrations come in different shapes and sizes, but I see three major approaches. Each of these has very different technical and governance implications.\nThree approaches Companies dying to get rid of their data centers often get started on a ‘lift and shift’ approach, where applications are moved from existing servers to equivalent servers in the cloud. The cloud service model consumed here is mainly IaaS (infrastructure as a service). Not much is outsourced to cloud providers here. Contrast that with SaaS.\nThe other side of the spectrum is adopting SaaS solutions. More often than not, these trickle in from the business side, not from IT. These could range from small meeting planners to full blown sales support systems.\nMore recently, developers have started to embrace cloud native architectures. Ultimately, both the target environment as well as the development environment can be cloud based. The cloud service model consumed here is typically PaaS.\nI am not here to advocate the benefits of one over the other, I think there can be business case for each of these.\nThe categories also have some overlap. Lift and shift can require some refactoring of code, to have it better fit cloud native deployments. And hardly any SaaS application is stand alone, so some (cloud native) integration with other software is often required.\nProfound differences The big point I want to make here is that there are profound differences in the issues that each of these categories faces, and the hard decisions that have to be made. Most of these decisions are about governance and risk management.\nWith lift and shift, the application functionality is pretty clear, but bringing that out to the cloud introduces data risks and technical risks. Data controls may be insufficient, and the application’s architecture may not be a good match for cloud, leading to poor performance and high cost.\nOne group of SaaS applications stems from ‘shadow IT’. The people that adopt them typically pay little attention to existing risk management policies. These can also add useless complexity to the application landscape. The governance challenges for these are obvious: consolidate and make them more compliant with company policies.\nAnother group of SaaS applications is the reincarnation of the ‘enterprise software package’. Think ERP, CRM or HR applications. These are typically run as a corporate project, with all its change management issues, except that you don’t have to run it yourself.\nThe positive side of SaaS solutions, in general, is that they are likely to be cloud native, which could greatly reduce their risk profile. Of course, this has to be validated, and a minimum risk control is to have a good exit strategy.\nFinally, cloud native development is the most exciting, rewarding and risky approach. This is because it explores and creates new possibilities that can truly transform an organization.\nOne of the most obvious balances to strike here is between speed of innovation and independence of platform providers. The more you are willing to commit yourself to an innovative platform, the faster you may be able to move. The two big examples I see of that are big data and internet of things. The major cloud providers have very interesting offerings there, but moving a fully developed application from one provider to another is going to be a really painful proposition. And of course, the next important thing is for developers to truly understand the risks and benefits of cloud native development.\nAgain, big governance and risk management issues to address.\n","permalink":"/book/value/three-ways-to-go-cloud/","title":"Multiple Ways to Go Cloud"},{"content":"Here is a high level overview of the SaaS provider business model and some of the strategic options that are in there.\nBusiness Model Canvas The business model canvas is a visual template for developing and discussion business models. For more information see http://en.wikipedia.org/wiki/Business_Model_Canvas and http://www.businessmodelgeneration.com/\nThe business model canvas has nine basic building blocks and specific relations between those building blocks. As examples in this article I consider two hypothetical SaaS providers. The first one delivers bookkeeping software, the second one delivers a project collaboration platform.\nCustomer segments (CS) In the Business Model Canvas, “Customer Segments” are the groups of customers that the company ultimately serves, I.e. the ones that consume and pay for the services. It is characteristic of the SaaS model that this could basically be anybody, not just IT people. Let us just remind ourselves that customers here are the ones that use the service to get their business done, or get their personal lives in order. In a business context we often also have to distinguish between the user and the organization that purchases the solution. This is very likely true in the case of our bookkeeping software company.\nValue Propositions (VP) The value propositions reflect the customer problems and needs. This is the central element that describes why the customer would ultimately pay for the product or service. The essential characteristics of cloud computing may or may not relate directly to the core value proposition of the software application. The core value proposition in our first example, automated bookkeeping, is unrelated to cloud computing. Of course cloud computing’s characteristics give the SaaS proposition an edge above its direct on-premise alternatives even if the functionality would be the same. Self-service provisioning leads to quicker time to deploy, more scalability in usage (whether accounts or transactions), lower investments or commitments, and potentially lower cost. The value proposition is fundamentally different in the second example, the project collaboration support site. Here the cloud’s characteristic of broad network accessibility is directly driving the usefulness of the software when its users are spread over company boundaries. Interestingly, the first provider could use this insight to extend its functionality beyond what would be possible in an on-premise solution. Think collaboration with accountants, suppliers and possibly customers, or channel partners.\nChannels (CH) Value propositions are delivered to customers through communications, distribution and sales channels. It is often assumed that cloud computing relies solely on self-service direct sales, but the reality is much more diverse. SaaS providers in particular are developing extensive partner programs. The typical enterprise software solution is not implemented overnight. It takes attention to change management and alignment on master data for example. That is why system integrators often experience the move from on-premis to SaaS as relatively painless. They are doing the same job on a different environment. For less invasive offerings, SaaS solutions are often aggregated in broker portals, often nicknamed ‘enterprise app stores’, whose added value is in consolidated billing, self-service provisioning, identity management, and potentially some data integration. But that is one to paint on another business model canvas. Another natural extension of the SaaS model is exposing the core functionality through an API. While not directly accessed by the consumer, this does allow integration with other SaaS providers. Our project collaboration software could integrate with an existing cloud storage provider. The main SaaS channels therefore are direct self-service sales, value added re-sellers, system integrators, and enterprise app-stores. The notion of cloud broker fits in here as well, but dissecting its many shapes and forms is a topic beyond the scope of this article.\nCustomer Relationships (CR) Customer relations are established and maintained with each specific customer segment. The lure of cloud computing is that the provider can have a much more direct relation with the customer than is possible with an on-premis solution. Technically, the provider can potentially see each and every move from the users. Which software builder would not like to be able to see the popularity of every feature in real-time? This allows for much more rapid innovation cycles. It is not impossible for the loop from idea to wide customer feedback to be closed in a couple of hours. However, this power can bring the provider in conflict with the consumer who might object to its data being used. As an example that is close to the limit of what might be considered acceptable consider the following case. An on-line bookkeeping service for individuals allows them to categorize payments to merchants. Once enough individuals categorized Danny’s steakhouse as a restaurant, this can then also be suggested to other clients of Danny’s. Is it legal to use data from one cloud consumer to deliver value to another? Generally speaking, the answer is no, but it may be acceptable if only aggregate data is used. Support is often easier on-line, and on-line communities often add considerable value for the consumer.\nRevenue Streams (RS) Revenue streams are the result of value propositions that are successfully offered to customers. The structure of revenue streams is where cloud computing differs from earlier IT service models. Software firms traditionally relied on licensing arrangements that were somewhat usage based, and could be hard to enforce technically as well as legally. Cloud computing service models by definition are usage based, and have the potential to be much more closely related to the value that is experienced by the customers. Both our examples enhance the productivity of users, and it is natural to charge per user who has access to the functionality on daily basis. Transactional services such as event management or email delivery are more naturally charged by the transaction, potentially on a bulk basis.\nKey Resources (KR) Key resources are the assets required to offer and deliver the previously mentioned elements (e.g. value proposition, customer relationships). The core asset of a software company is likely to be its code base, its understanding of consumer requirements and processes, and the staff that does this. For a SaaS provider, this is augmented with actual technical service delivery and understanding of consumer behavior. It may seem a small matter to go from knowing your software and the way it runs at your customer’s sites to running the software yourself. Yet, the competencies involved are fairly different. The most obvious differences between cloud providers and software delivery companies are in multi-tenancy and feature velocity. Every SaaS provider has to think about how multi-tenant his software needs to be to realize the right scalability model for its customers. Feature velocity, the time between inception and go-live is a great competitive differentiator. To realize it, the provider needs an integrated ‘DevOps’ organization, which asks a lot of people, process and technology. Then, on the physical asset side, an important question is how much delivery assets the company decided to have. Does it need to own hardware assets or are they sourced from an upstream cloud provider? On the canvas, this represents a trade-off between resource and partnerships.\nKey Activities (KA) The key resources perform key activities. The obvious key activity at a software company is: develop software. In the long run, these should increase the value of the code base. For a SaaS cloud provider, actually delivering the software as a service is an extension to that. The virtuous circle in a SaaS provider is understanding customer behavior and requirements, translating these into new functionality and delivering this to customers. For this to be successful on the SaaS scale, it has to be executed as an integrated pipeline. The most advanced organizations get the operational activities out of the way. Developers and product managers are empowered to push features to production. Tests are all automated and the focus of operational staff is not so much into bringing features in production, but to maintain the assets and operational fabric that allow the developers to do that themselves.\nKey Partnerships (KP) Some activities are outsourced, and some resources are acquired outside the enterprise. A fundamental choice for every software company is ownership of development tools, as the dependence on these is of strategic importance. That is why large software companies used to have their own homegrown development environments. It turns out that the development tools are a source of strategic risk, but not of strategic advantage. As the industry has matured, it turns out that significant portions of these are best moved to an open source model. An additional fundamental choice for a SaaS provider is: who runs and owns the delivery infrastructure? Again, that infrastructure represents a risk more than a source of competitive advantage. As Netflix puts it: “we are not in the business of building data centers”. That is why it makes sense to work with IaaS or PaaS providers rather than owning the infrastructure. This will obviously also impact the cost structure as we will see.\nCost Structure (CS) All business model elements discussed above impact the cost structure. In more traditional IT service models the revenue streams are tightly coupled to the cost structure. The cloud computing innovation is also about decoupling these. In software, revenue streams are pretty disconnected from the cost structure. After all, when the software is written, shipping it to customers has very low incremental cost, even though servicing customers has not. For software as a service this is a little less so, as there is actual infrastructure supporting the service. The cost of that infrastructure is related to the usage volume. The most significant cost elements related to software development are in creating and maintaining functionality, and in maintaining the development and delivery infrastructure. For the software delivery side there will be costs related to in company server infrastructure or incurred from key partners such as IaaS providers. Interestingly, for a lot of SaaS companies, most of the development cost is about supporting future customer needs, not current customer needs. An exception could be the bookkeeping firm, that might be tracking tax regulations as they tend to change regularly.\nSummary Again we see the business model canvas as a good tool to map out the particularities of cloud provider business models. It points us to provider particularities and indicates some important strategic choices.\nSee also on YouTube:\n","permalink":"/book/value/business-model-canvas-saas/","title":"Business Model Canvas for SaaS Providers"},{"content":"🔎 Type to search through blog posts and book chapters.\n","permalink":"/search/","title":"Search"}]